MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;==========================================================================
                      00002 ; TITLE     PIC10F2xx+PIC12F5xx+I2S+RDA5807FP+IR      
                      00003 ; SUBTITLE  PIC10F200,F202,F204,F206,F220,F222,12F508,12F509 & 12F510 
                      00004 ; CONTENTS: RDA5807FP + I²C + I²S + NEC IR REMOTE Control    
                      00005 ; CONTENTS: No EEPROM. Fixed starting channel and volume at startup                             
                      00006 ; EDITOR:   @mit41301                                                    
                      00007 ; UPDATED:  11/09/2025                                                   
                      00008 ;==========================================================================
                      00009 
                      00010  ;include "p12F519.inc"
                      00011 
                      00012 
                      00013  ifdef __10F200
                      00014  include "p10F200.inc"
                      00015  list    p=10F200
                      00016 RAM     SET  H'0010'
                      00017 MAXRAM  EQU  H'001F'
                      00018  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00019  __idlocs H'F200'
                      00020 SCL        EQU    GP1    ;SCL pin of the I2C Bus
                      00021 SDA        EQU    GP2    ;SDA pin of the I2C Bus
                      00022 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00023  MESSG /*PIC10F200 is selected as TARGET*/
                      00024  endif
                      00025 ;==========================================================================
                      00026  ifdef __10F202
                      00027  include "p10F202.inc"
                      00028  list    p=10F202
                      00029 RAM     EQU  h'0008'
                      00030 MAXRAM  EQU  H'001F'
                      00031  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00032  __idlocs H'F202'
                      00033 SCL        EQU    GP1    ;SCL pin of the I2C Bus
                      00034 SDA        EQU    GP2    ;SDA pin of the I2C Bus
                      00035 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00036  MESSG /*PIC10F202 is selected as TARGET*/
                      00037  endif
                      00038 ;==========================================================================
                      00039  ifdef __10F204
                      00040  include "p10F204.inc"
                      00041  list    p=10F204
                      00042 RAM     EQU  H'0010'
                      00043 MAXRAM  EQU  H'001F'
                      00044  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00045  __idlocs H'F204'
                      00046 SCL        EQU    GP1    ;SCL pin of the I2C Bus
                      00047 SDA        EQU    GP2    ;SDA pin of the I2C Bus
                      00048 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00049  MESSG /*PIC10F204 is selected as TARGET*/
                      00050  endif
                      00051 ;==========================================================================
                      00052  ifdef __10F206
                      00053  include "p10F206.inc"
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054  list    p=10F206
                      00055 RAM     EQU  h'0008'
                      00056 MAXRAM  EQU  H'001F'
                      00057  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00058  __idlocs H'F206'
                      00059 SCL        EQU    GP1    ;SCL pin of the I2C Bus
                      00060 SDA        EQU    GP2    ;SDA pin of the I2C Bus
                      00061 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00062  MESSG /*PIC10F206 is selected as TARGET*/
                      00063  endif
                      00064 ;==========================================================================
                      00065  ifdef __10F220
                      00066  include "p10F220.inc"
                      00067  list    p=10F220
                      00068 RAM     EQU  H'0010'
                      00069 MAXRAM  EQU  H'001F'
                      00070  __CONFIG _IOSCFS_4MHZ & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00071  __idlocs H'F220'
                      00072 SCL        EQU    GP1    ;SCL pin of the I2C Bus
                      00073 SDA        EQU    GP2    ;SDA pin of the I2C Bus
                      00074 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00075  MESSG /*PIC10F220 is selected as TARGET*/
                      00076  endif
                      00077 ;==========================================================================
                      00078  ifdef __10F222
                      00079  include "p10F222.inc"
                      00080  list    p=10F222
                      00081 RAM     EQU  h'0009'
                      00082 MAXRAM  EQU  H'001F'
                      00083  __CONFIG _IOSCFS_4MHZ & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00084  __idlocs H'F222'
                      00085 SCL        EQU    GP1    ;SCL pin of the I2C Bus
                      00086 SDA        EQU    GP2    ;SDA pin of the I2C Bus
                      00087 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00088  MESSG /*PIC10F222 is selected as TARGET*/
                      00089  endif
                      00090 ;========================================================================== 
                      00091  ifdef __12F508
                      00092  include "p12F508.inc"
                      00093  list    p=12F508
                      00094 RAM     EQU  h'0007'
                      00095 MAXRAM  EQU  H'001F'
                      00096  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00097  __idlocs H'F508'
                      00098 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00099 SCL        EQU    GP4    ;SCL pin of the I²C Bus
                      00100 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00101  MESSG /*PIC12F508 is selected as TARGET*/
                      00102  endif
                      00103 ;==========================================================================
                      00104  ifdef   __12F509
                      00105  include "p12F509.inc"
                      00001         LIST
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC12F509 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00156         LIST
                      00106  list    p=12F509
  00000007            00107 RAM     EQU  H'0007'
  0000003F            00108 MAXRAM  EQU  H'003F'
0FFF   0FEA           00109  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
0400   000F 0005 0000 00110  __idlocs H'F509'
       0009 
  00000003            00111 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
  00000004            00112 SCL        EQU    GP4    ;SCL pin of the I²C Bus
  00000005            00113 SDA        EQU    GP5    ;SDA pin of the I²C Bus
Message[301]: MESSAGE: (/*PIC12F509 is selected as TARGET*/)
                      00114  MESSG /*PIC12F509 is selected as TARGET*/
                      00115  endif
                      00116 ;==========================================================================
                      00117  ifdef   __12F510
                      00118  include "p12F510.inc"
                      00119  list    p=12F510
                      00120 RAM     EQU  H'000A'
                      00121 MAXRAM  EQU  H'003F'
                      00122  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF & _IOSCFS_OFF
                      00123  __idlocs H'F510'
                      00124 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00125 SCL        EQU    GP4    ;SCL pin of the I²C Bus
                      00126 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00127  MESSG /*PIC12F510 is selected as TARGET*/
                      00128  endif
                      00129 
                      00130  errorlevel +202,+205,+207,+301,+302,+305,+306,+224
                      00131 ;==========================================================================
                      00132                 CBLOCK RAM
                      00133 ;==========================================================================
  00000007            00134 i           ;EQU    010h    ;Delay variable
  00000008            00135 j           ;EQU    011h    ;Delay variable
  00000009            00136 bit_count   ;EQU    012h    ;Counter of processed bits in I2C
  0000000A            00137 i2c_data    ;EQU    013h    ;Data to receive/transmit via I2C
  0000000B            00138 port        ;EQU    014h    ;Helper register to implement I2C
  0000000C            00139 ack         ;EQU    015h    ;Acknowledgment received from the device
  0000000D            00140 volume      ;EQU    016h    ;Radio volume level
  0000000E            00141 frequency_l ;EQU    017h    ;Frequency low byte
  0000000F            00142 frequency_h ;EQU    018h    ;Frequency high byte
                      00143 ;==========================================================================
  00000010            00144 _count      ;EQU    019h    ;Saved value of the timer
  00000011            00145 _byte_count ;EQU    01Ah    ;Counter of processed bytes
  00000012            00146 _bit_count  ;EQU    01Bh    ;Counter of processed bits
  00000013            00147 _ir_data:4  ;EQU    01Ch    ;First IR byte
                      00148 ;==========================================================================
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000017            00149 CHECK           
                      00150                 ENDC
                      00151  if (CHECK-1) > MAXRAM
                      00152     error "File register usage OVERFLOW"
                      00153  endif
                      00154 ;==========================================================================
                      00155 ;volume_init EQU 0x03 | 0x80; Initial Volume = 3 // [0..15]
  00000083            00156 volume_init EQU 0x03 | 1<<7 ;0x80; Initial Volume = 3 // [0..15]
                      00157 
  00000397            00158 freq  EQU d'919'        ;   91.9 MHz
                      00159 ;freq  EQU d'943'   ;   94.3 MHz
                      00160 ;freq  EQU d'1040'      ;  104.0 MHz
                      00161 ;freqB EQU (freq - d'870') ; BAND = 0 : 87~108 MHz (US/Europe)
  00000031            00162 freqB EQU (freq - 366)     ; BAND = 0 : 87~108 MHz (US/Europe)
  0000000C            00163 freqH EQU (freqB >> 2)     ; Frequency = Channel Spacing(kHz) x CHAN + 87.0 MHz
  00000040            00164 freqL EQU ((freqB&3) << 6) ; Shift channel selection for matching register 0x03
                      00165         
0000                  00166         ORG    H'0000'
                      00167  
0000   0EFE           00168     andlw  ~1
0001   0025           00169     movwf  OSCCAL
                      00170  ifdef __10F204
                      00171     BCF    CMCON0,CMPON
                      00172  endif
                      00173 
                      00174  ifdef __10F206
                      00175     BCF    CMCON0,CMPON  ;Disable Digital Comparator function
                      00176  endif
                      00177  ifdef __10F220
                      00178     BCF    ADCON0,ADON   
                      00179  endif
                      00180  ifdef __10F222
                      00181     BCF    ADCON0,ADON   ;Disable Analog to Digital function
                      00182  endif
                      00183  ifdef __12F510
                      00184     BCF    CM1CON0,C1ON     ;Disable Digital Comparator function
                      00185     BCF    ADCON0,ADON      ;Disable Analog to Digital function
                      00186  endif
                      00187 
0002                  00188 INIT:
0002   0C97           00189     MOVLW  ~((1<<T0CS)|(1<<NOT_GPPU)|(1<<PSA))
0003   0002           00190     OPTION                ;Enable GPIO2 and pull-ups
                      00191 
0004   0C3F           00192     MOVLW  0x3F           ;changed from 0x0F for 12F5xx into 'port' register
0005   002B           00193     MOVWF  port           ;It's used to switch SDA/SCL pins direction
0006   0006           00194     TRIS   GPIO           ;Set all pins as inputs
                      00195 
0007   0CFF           00196     MOVLW  0xFF           ;Perform 200 ms delay
0008   0995           00197     CALL   DELAY          ;to let the power stabilize
0009   0CFF           00198     MOVLW  0xFF           ;Perform 400 ms delay
000A   0995           00199     CALL   DELAY          ;to let the power stabilize
                      00200 
000B   0066           00201     CLRF   GPIO           ;Clear GPIO to set all pins to 0
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00202 
                      00203 ;DEFAULT STARTING:        ;Default starting point after init
                      00204 
000C   0C83           00205     movlw  volume_init    ;0x83
000D   0C0D           00206     movlw  volume
000E   0C40           00207     movlw  freqL          ;91.90 MHz
000F   002E           00208     movwf  frequency_l
0010   0C0C           00209     movlw  freqH          ;91.90 MHz
0011   002F           00210     movwf  frequency_h
                      00211 ;
0012   0CC0           00212     MOVLW  0xC0           ;Implement AND operation between 0xC0
0013   016E           00213     ANDWF  frequency_l, F ;and 'frequency_l' to clear its last 6 bits
0014   058E           00214     BSF    frequency_l, 4 ;Set bit 4 (Tune) to adjust the frequency
                      00215 
                      00216 ;START_RADIO:              ;Start FM radio
0015   0965           00217     CALL   I2C_START      ;Issue I2C Start condition
0016   0C20           00218     MOVLW  0x20           ;Radio chip address for sequential writing is 0x20
0017   096C           00219     CALL   I2C_WRITE_BYTE ;Write the radio address via i2C
0018   0CD0           00220     MOVLW  0xD0           ;Write high byte into radio register 0x02/ BASS BOOST EN 
0019   096C           00221     CALL   I2C_WRITE_BYTE
001A   0C01           00222     MOVLW  0x01           ;Write  low byte into radio register 0x02
001B   096C           00223     CALL   I2C_WRITE_BYTE
001C   020F           00224     MOVF   frequency_h, W ;Write high byte into radio register 0x03
001D   096C           00225     CALL   I2C_WRITE_BYTE
001E   020E           00226     MOVF   frequency_l, W ;Write  low byte into radio register 0x03
001F   096C           00227     CALL   I2C_WRITE_BYTE
                      00228 ;==========================================================================
                      00229 ;          IV
                      00230 ;==========================================================================
0020   0C02           00231     MOVLW  b'00000010'    ;LOAD W Reg with 0x04 Register High byte 
0021   096C           00232     CALL   I2C_WRITE_BYTE ;Write high byte into radio register 0x04
0022   0C40           00233     MOVLW  b'01000000'    ;LOAD W Reg with 0x04 Register Low byte 
0023   096C           00234     CALL   I2C_WRITE_BYTE ;Write high byte into radio register 0x04
                      00235 ;==========================================================================
                      00236 ;          V
                      00237 ;==========================================================================
0024   0C00           00238     MOVLW  b'00000000'    ;Write high byte into radio register 0x05
0025   096C           00239     CALL   I2C_WRITE_BYTE
0026   0C00           00240     MOVLW  b'00000000'    ;Write low byte into radio register 0x05
0027   096C           00241     CALL   I2C_WRITE_BYTE
                      00242 ;==========================================================================
                      00243 ;          VI
                      00244 ;==========================================================================
0028   0C02           00245     MOVLW  b'00000010'    ;Write high byte into radio register 0x06
0029   096C           00246     CALL   I2C_WRITE_BYTE
002A   0C70           00247     MOVLW  b'01110000'    ;Write low byte into radio register 0x06
002B   096C           00248     CALL   I2C_WRITE_BYTE
                      00249 ;==========================================================================
002C   0968           00250     CALL   I2C_STOP       ;Issue I2C Stop condition
                      00251 ;==========================================================================
                      00252 
002D   0C0F           00253     MOVLW  0x0F           ;Implement AND operation between 0xC0
002E   016D           00254     ANDWF  volume, F      ;and 'volume' to clear its higher 4 bits
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002F   05ED           00255     BSF    volume, 7      ;Set bit 7  to select correct LNA input
0030   0A38           00256     GOTO   SET_VOLUME     ;And go to the 'SET_VOLUME' label
                      00257 
0031                  00258 LOOP:                     
                      00259 
0031                  00260 INCREASE_VOLUME:          ;Otherwise start 'INCREASE_VOLUME'
0031   02AD           00261     INCF   volume, F      ;Increment the 'volume' register
0032   068D           00262     BTFSC  volume, 4      ;If bit 4 becomes set (volume = 0b10010000)
0033   00ED           00263     DECF   volume, F      ;then decrement the 'volume' to get 0b10001111
0034   0A38           00264     GOTO   SET_VOLUME     ;and go to the 'SET_VOLUME' label
0035                  00265 DECREASE_VOLUME:          ;Decrease the volume here
0035   00ED           00266     DECF   volume, F      ;Decrement the 'volume' register
0036   07ED           00267     BTFSS  volume, 7      ;If bit 7 becomes 0 (volume = 0b01111111)
0037   02AD           00268     INCF   volume, F      ;then increment the 'volume' to get 0b10000000
0038                  00269 SET_VOLUME:               ;Set the radio volume
0038   0965           00270     CALL   I2C_START      ;Issue I2C start condition
0039   0C22           00271     MOVLW  0x22           ;Radio chip address for random writing is 0x22
003A   096C           00272     CALL   I2C_WRITE_BYTE ;Write the radio address via I2C
003B   0C05           00273     MOVLW  0x05           ;Set the register number to write to (0x05)
003C   096C           00274     CALL   I2C_WRITE_BYTE ;And write it via I2C
003D   0C88           00275     MOVLW  0x88           ;Set the high byte of 0x05 register (default value)
003E   096C           00276     CALL   I2C_WRITE_BYTE ;And write it via i2C
003F   020D           00277     MOVF   volume, W      ;Set the 'volume' as low byte of 0x05 register
0040   096C           00278     CALL   I2C_WRITE_BYTE ;And write it via I2C
0041   0968           00279     CALL   I2C_STOP       ;Issue Stop condition
                      00280 
0042   0A9C           00281     GOTO   _LOOP           ;And return to the 'LOOP' label
                      00282 
                      00283 ;CHANNEL_SEEK:             ;CHANNEL_SEEK up | down
                      00284 
0043                  00285 CH_UP:
0043   0965           00286     CALL   I2C_START      ;Issue I2C Start condition
0044   0C20           00287     MOVLW  0x20           ;Radio chip address for sequential writing is 0x20
0045   096C           00288     CALL   I2C_WRITE_BYTE ;Write the radio address via I2C
                      00289 
0046   0CC3           00290     MOVLW  0xC3           ;Otherwise set 0xC3 as high byte of 0x02 register
0047   096C           00291     CALL   I2C_WRITE_BYTE ;And write it via I2C
0048   0C01           00292     MOVLW  0x01           ;Set 0x01 as low byte of 0x02 register
0049   096C           00293     CALL   I2C_WRITE_BYTE ;And write it via I2C
004A   0968           00294     CALL   I2C_STOP       ;Issue I2C Stop condition
004B   0A9C           00295     GOTO   _LOOP           ;And return to the '_LOOP' labe;
                      00296 
004C                  00297 SEEK_DOWN:                ;Seek the station down
                      00298 
004C   0965           00299     CALL   I2C_START      ;ADDEDIssue I2C Start condition
004D   0C20           00300     MOVLW  0x20           ;ADDEDRadio chip address for sequential writing is 0x20
004E   096C           00301     CALL   I2C_WRITE_BYTE ;ADDEDWrite the radio address via I2C
                      00302 
004F   0CC1           00303     MOVLW  0xC1           ;Set 0xC1 as high byte of 0x02 register
0050   096C           00304     CALL   I2C_WRITE_BYTE ;Ending of previous transaction
0051   0C01           00305     MOVLW  0x01           ;Set 0x01 as low byte of 0x02 register
0052   096C           00306     CALL   I2C_WRITE_BYTE ;And write it via I2C
0053   0968           00307     CALL   I2C_STOP       ;Issue I2C Stop condition
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0054   0A9C           00308     GOTO   _LOOP           ;And return to the '_LOOP' labe;
                      00309 
                      00310 ;-------------Helper subroutines---------------------------------------------
0055                  00311 SDA_HIGH:                 ;Set SDA pin high
0055   05AB           00312     BSF    port, SDA      ;Set 'sda' bit in the 'port' to make it input
0056   020B           00313     MOVF   port, W        ;Copy 'port' into W register
0057   0006           00314     TRIS   GPIO           ;And set it as TRISGPIO value
0058   0800           00315     RETLW  0
                      00316 
0059                  00317 SDA_LOW:                  ;Set SDA pin low
0059   04AB           00318     BCF    port, SDA      ;Reset 'sda' bit in the 'port' to make it output
005A   020B           00319     MOVF   port, W        ;Copy 'port' into W register
005B   0006           00320     TRIS   GPIO           ;And set it as TRISGPIO value
005C   0800           00321     RETLW  0
                      00322 
005D                  00323 SCL_HIGH:                 ;Set SCL pin high
005D   058B           00324     BSF    port, SCL      ;Set 'scl' bit in the 'port' to make it input
005E   020B           00325     MOVF   port, W        ;Copy 'port' into W register
005F   0006           00326     TRIS   GPIO           ;And set it as TRISGPIO value
0060   0800           00327     RETLW  0
                      00328 
0061                  00329 SCL_LOW:                  ;Set SCL pin low
0061   048B           00330     BCF    port, SCL      ;Reset 'scl' bit in the 'port' to make it output
0062   020B           00331     MOVF   port, W        ;Copy 'port' into W register
0063   0006           00332     TRIS   GPIO           ;And set it as TRISGPIO value
0064   0800           00333     RETLW  0
                      00334 ;-------------I2C start condition--------------
0065                  00335 I2C_START:
0065   095D           00336     CALL   SCL_HIGH       ;Set SCL high
0066   0959           00337     CALL   SDA_LOW        ;Then set SDA low
0067   0800           00338     RETLW  0
                      00339 ;-------------I2C stop condition---------------
0068                  00340 I2C_STOP:
0068   0959           00341     CALL   SDA_LOW        ;Set SDA low
0069   095D           00342     CALL   SCL_HIGH       ;Set SCL high
006A   0955           00343     CALL   SDA_HIGH       ;Then set SDA highs and release the bus
006B   0800           00344     RETLW  0
                      00345 ;------------I2C write byte--------------------
006C                  00346 I2C_WRITE_BYTE:
006C   002A           00347     MOVWF  i2c_data       ;Load 'i2c_data' from W register
006D   0C08           00348     MOVLW  8              ;Load value 8 into 'bit_count'
006E   0029           00349     MOVWF  bit_count      ;to indicate we're going to send 8 bits
006F                  00350 I2C_WRITE_BIT:            ;Write single bit to I2C
006F   0961           00351     CALL   SCL_LOW        ;Set SCL low, now we can change SDA
0070   07EA           00352     BTFSS  i2c_data, 7    ;Check the MSB of 'i2c_data'
0071   0A74           00353     GOTO   I2C_WRITE_0    ;If it's 0 then go to the 'I2C_WRITE_0' label
0072                  00354 I2C_WRITE_1:              ;Else continue with 'I2C_WRITE_1'
0072   0955           00355     CALL   SDA_HIGH       ;Set SDA high
0073   0A75           00356     GOTO   I2C_SHIFT      ;And go to the 'I2C_SHIFT' label
0074                  00357 I2C_WRITE_0:
0074   0959           00358     CALL   SDA_LOW        ;Set SDA low
0075                  00359 I2C_SHIFT:
0075   095D           00360     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0076   036A           00361     RLF    i2c_data, F    ;Shift 'i2c_data' one bit to the left
0077   02E9           00362     DECFSZ bit_count, F   ;Decrement the 'bit_count' value, check if it's 0
0078   0A6F           00363     GOTO   I2C_WRITE_BIT  ;If not then return to the 'I2C_WRITE_BIT'
0079                  00364 I2C_CHECK_ACK:            ;Else check the acknowledgement bit
0079   0961           00365     CALL   SCL_LOW        ;Set I2C low to end the last pulse
007A   0955           00366     CALL   SDA_HIGH       ;Set SDA high to release the bus
007B   095D           00367     CALL   SCL_HIGH       ;Set I2C high to start the new pulse
007C   0206           00368     MOVF   GPIO, W        ;Copy the GPIO register value into the 'ack'
007D   002C           00369     MOVWF  ack            ;Now bit 'sda' of the 'ack' will contain ACK bit
007E   0961           00370     CALL   SCL_LOW        ;Set SCL low to end the acknowledgement bit
007F   0800           00371     RETLW  0
                      00372 ;------------I2C read byte--------------------
0080                  00373 I2C_READ_BYTE:
0080   0C08           00374     MOVLW  8              ;Load value 8 into 'bit_count'
0081   0029           00375     MOVWF  bit_count      ;to indicate we're going to receive 8 bits
0082   006A           00376     CLRF   i2c_data       ;Clear the 'i2c_data' register
0083                  00377 I2C_READ_BIT:             ;Read single bit from the I2C
0083   036A           00378     RLF    i2c_data, F    ;Shift the 'i2c_data' register one bit to the left
0084   0961           00379     CALL   SCL_LOW        ;Set SCL low to prepare for the new bit
0085   095D           00380     CALL   SCL_HIGH       ;Set SCL high to read the bit value
0086   06A6           00381     BTFSC  GPIO, SDA      ;Check the 'sda' bit in the GPIO register
0087   050A           00382     BSF    i2c_data, 0    ;if it's 1 then set the LSB of the 'i2c_data'
0088   02E9           00383     DECFSZ bit_count, F   ;Decrement the 'bit_count' value, check if it's 0
0089   0A83           00384     GOTO   I2C_READ_BIT   ;If not, then return to the 'I2C_READ_BIT'
008A   0961           00385     CALL   SCL_LOW        ;Set SCL low to end the last pulse
008B   0800           00386     RETLW  0              ;Otherwise return from the subroutine
                      00387 ;----------I2C send ACK----------------------
008C                  00388 I2C_ACK:
008C   0959           00389     CALL   SDA_LOW        ;Set SDA low to issue ACK condition
008D   095D           00390     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
008E   0961           00391     CALL   SCL_LOW        ;Set SCL low to end the pulse
008F   0955           00392     CALL   SDA_HIGH       ;Set SDA high to release the bus
0090   0800           00393     RETLW  0
                      00394 ;----------I2C send NACK----------------------
0091                  00395 I2C_NACK:
0091   0955           00396     CALL   SDA_HIGH       ;Set SDA low to issue NACK condition
0092   095D           00397     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
0093   0961           00398     CALL   SCL_LOW        ;Set SCL low to end the pulse
0094   0800           00399     RETLW  0
                      00400 ;-------------Delay subroutine--------------
0095                  00401 DELAY:                    ;Start DELAY subroutine here  
0095   0027           00402     MOVWF  i              ;Copy the value to the register i
0096   0028           00403     MOVWF  j              ;Copy the value to the register j
0097                  00404 DELAY_LOOP:               ;Start delay loop
0097   02E7           00405     DECFSZ i, F           ;Decrement i and check if it is not zero
0098   0A97           00406     GOTO   DELAY_LOOP     ;If not, then go to the DELAY_LOOP label
0099   02E8           00407     DECFSZ j, F           ;Decrement j and check if it is not zero
009A   0A97           00408     GOTO   DELAY_LOOP     ;If not, then go to the DELAY_LOOP label
009B   0800           00409     RETLW  0              ;Else return from the subroutine
                      00410 ;==========================================================================
                      00411 ;---IR REMOTE CONTROL 38kHz ROUTINE----------------------------------------
                      00412 ;==========================================================================
009C                  00413 _LOOP:                    ;Main loop of the program
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00414 ;---------------Wait for the preamble positive pulse---------------------
009C   0666           00415     BTFSC  GPIO, IRx       ;Wait while 'ir' pin goes down
009D   0A9C           00416     GOTO  _LOOP           ;If it's high then return to 'LOOP'
009E   0061           00417     CLRF   TMR0           ;Otherwise clear the timer register
009F   0766           00418     BTFSS  GPIO, IRx       ;And wait while 'ir' is low
00A0   0A9F           00419     GOTO   $-1
00A1   0201           00420     MOVF   TMR0, W        ;Copy the TMR0 value into the W register
00A2   0030           00421     MOVWF _count         ;and save the value into the 'count' register
00A3   0C1E           00422     MOVLW  d'30'          ;Load 30 into W (256 us x 32 = 7.7 ms)
00A4   0090           00423     SUBWF _count, W      ;And subtract W from 'count'
00A5   0703           00424     BTFSS  STATUS, C      ;If 'count' < 30 (pulse is shorter than 7.7 ms)
00A6   0A9C           00425     GOTO  _LOOP          ;then return to 'LOOP'
00A7   0C2D           00426     MOVLW  d'45'          ;Load 45 into W (256 us x 45 = 11.5 ms)
00A8   0090           00427     SUBWF _count, W      ;And subtract W from 'count'
00A9   0603           00428     BTFSC  STATUS, C      ;If 'count' > 45 (pulse is longer than 8 ms)
00AA   0A9C           00429     GOTO  _LOOP           ;then return to 'LOOP'
                      00430 ;---------------Check the preamble negative pulse---------------------
00AB   0061           00431     CLRF   TMR0            ;Otherwise clear the timer register
00AC   0666           00432     BTFSC  GPIO, IRx       ;And wait while 'ir' is high
00AD   0AAC           00433     GOTO   $-1
00AE   0201           00434     MOVF   TMR0, W         ;Copy the TMR0 value into the W register
00AF   0030           00435     MOVWF _count         ;and save the value into the 'count' register
00B0   0C0D           00436     MOVLW  d'13'          ;Load 15 into W (256 us x 13 = 3.3 ms)
00B1   0090           00437     SUBWF _count, W      ;And subtract W from 'count'
00B2   0703           00438     BTFSS  STATUS, C      ;If 'count' < 13 (pulse is shorter than 3.3 ms)
00B3   0A9C           00439     GOTO  _LOOP           ;then return to 'LOOP'
00B4   0C14           00440     MOVLW  d'20'          ;Load 20 into W (256 us x 20 = 5.1 ms)
00B5   0090           00441     SUBWF _count, W      ;And subtract W from 'count'
00B6   0603           00442     BTFSC  STATUS, C      ;If 'count' > 20 (pulse is longer than 5.1 ms)
00B7   0A9C           00443     GOTO  _LOOP           ;then return to 'LOOP'
                      00444 ;---------------Receive the command bytes-----------------------------
00B8   0071           00445     CLRF  _byte_count     ;Clear the 'byte_count' register    
00B9   0C13           00446     MOVLW _ir_data       ;Load the address of the 'ir_data' into W
00BA   0024           00447     MOVWF  FSR            ;and save it to the indirect pointer register
00BB                  00448 _RECEIVE_BYTE:
00BB   0072           00449     CLRF  _bit_count      ;Clear the 'bit_count' register
00BC   0060           00450     CLRF   INDF            ;Clear the indirectly addressed register
00BD                  00451 _RECEIVE_BIT:
00BD   0320           00452     RRF    INDF, F          ;Shift the INDF register to the right
                      00453 ;---------------Receive the positive pulse of the bit-----------------
00BE   0061           00454     CLRF   TMR0           ;Otherwise clear the timer register
00BF   0766           00455     BTFSS  GPIO, IRx      ;And wait while 'ir' is low
00C0   0ABF           00456     GOTO   $-1
00C1   0201           00457     MOVF   TMR0, W        ;Copy the TMR0 value into the W register
00C2   0030           00458     MOVWF _count         ;and save the value into the 'count' register
00C3   0C01           00459     MOVLW 1             ;Load 1 into W (256 us x 1 = 0.26 ms)
00C4   0090           00460     SUBWF _count, W      ;And subtract W from 'count'
00C5   0703           00461     BTFSS  STATUS, C     ;If 'count' < 1 (pulse is shorter than 0.26 ms)
00C6   0A9C           00462     GOTO  _LOOP           ;then return to 'LOOP'
00C7   0C03           00463     MOVLW 3             ;Load 3 into W (256 us x 3 = 0.77 ms)
00C8   0090           00464     SUBWF _count, W      ;And subtract W from 'count'
00C9   0603           00465     BTFSC  STATUS, C     ;If 'count' > 3 (pulse is longer than 0.77 ms)
00CA   0A9C           00466     GOTO  _LOOP           ;then return to 'LOOP'
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00467 ;---------------Receive the negative pulse of the bit-----------------
00CB   0061           00468     CLRF   TMR0           ;Otherwise clear the timer register
00CC   0666           00469     BTFSC  GPIO, IRx     ;And wait while 'ir' is high
00CD   0ACC           00470     GOTO   $-1
00CE   0201           00471     MOVF   TMR0, W        ;Copy the TMR0 value into the W register
00CF   0030           00472     MOVWF _count        ;and save the value into the 'count' register
00D0   0C04           00473     MOVLW 4;/////////// ;Load 5 into W (256 us x 4 = 1.1 ms)
00D1   0090           00474     SUBWF _count, W      ;And subtract W from 'count'
00D2   0703           00475     BTFSS  STATUS, C     ;If 'count' < 4 (pulse is shorter than 1.1 ms)
00D3   0AD9           00476     GOTO  _NEXT_BIT       ;then go to the 'NEXT_BIT' label
00D4   0C08           00477     MOVLW 8             ;Load 8 into W (256 us x 8 = 2 ms)
00D5   0090           00478     SUBWF _count, W      ;And subtract W from 'count'
00D6   0603           00479     BTFSC  STATUS, C     ;If 'count' > 8 (pulse is longer than 2 ms)
00D7   0A9C           00480     GOTO  _LOOP         ;then go to the 'LOOP' label
00D8   05E0           00481     BSF    INDF, 7       ;Set the MSB of the INDF register
00D9                  00482 _NEXT_BIT:
00D9   02B2           00483     INCF  _bit_count, F   ;Increment the 'bit_count' register
00DA   0772           00484     BTFSS _bit_count, 3  ;Check if 'bit_count' becomes 8
00DB   0ABD           00485     GOTO  _RECEIVE_BIT    ;If it's not, then return to 'RECEIVE_BIT' label
00DC   02B1           00486     INCF  _byte_count, F  ;Increment the 'byte_count' register
00DD   0651           00487     BTFSC _byte_count, 2 ;Check if 'byte_count' becomes 4    
00DE   0AE1           00488     GOTO  _CHECK_DATA     ;If it is then go to 'CHECK_DATA' label
00DF   02A4           00489     INCF   FSR, F          ;Increment the indirect addressing pointer
00E0   0ABB           00490     GOTO  _RECEIVE_BYTE   ;and go to 'RECEIVE_BYTE' label
                      00491 
00E1                  00492 _CHECK_DATA:
00E1   0254           00493     COMF _ir_data+1, W   ;Negate the second received byte
00E2   0193           00494     XORWF _ir_data, W    ;And implement the XOR between 1st and 2nd bytes
00E3   0743           00495     BTFSS STATUS, Z      ;If the result is not 0 (bytes are not equal)
00E4   0A9C           00496     GOTO _LOOP           ;Then return to the 'LOOP' label
00E5   0256           00497     COMF _ir_data+3, W   ;Negate the fourth received byte
00E6   0195           00498     XORWF _ir_data+2, W  ;And implement the XOR between 3rd and 4th bytes
00E7   0743           00499     BTFSS STATUS, Z      ;If the result is not 0 (bytes are not equal)
00E8   0A9C           00500     GOTO _LOOP           ;Then return to the 'LOOP' label
                      00501 
00E9   0C05           00502     MOVLW 0x05           ;Check the VOL- button (code 0x05)
00EA   0195           00503     XORWF _ir_data+2, W  ;If command is not 0x05
00EB   0743           00504     BTFSS STATUS, Z
00EC   0AEE           00505     GOTO  $+2             ;then skip the next line
00ED   0A35           00506         goto  DECREASE_VOLUME
                      00507 
00EE   0C06           00508     MOVLW 0x06           ;Check the VOL+ button (code 0x06)
00EF   0195           00509     XORWF _ir_data+2, W  ;If command is not 0x06
00F0   0743           00510     BTFSS STATUS, Z
00F1   0AF3           00511     GOTO  $+2            ;then skip the next line
00F2   0A31           00512         goto  INCREASE_VOLUME
                      00513 
00F3   0C02           00514     MOVLW 0x02           ;Check the << CH- button (code 0x02)
00F4   0195           00515     XORWF _ir_data+2, W  ;If command is not 0x02
00F5   0743           00516     BTFSS STATUS, Z
00F6   0AF8           00517     GOTO  $+2            ;then skip the next line
00F7   0A4C           00518         goto  SEEK_DOWN 
                      00519 
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F8   0C03           00520     MOVLW 0x03           ;Check the W button (code 0x03)
00F9   0195           00521     XORWF _ir_data+2, W  ;If command is not 0x03
00FA   0743           00522     BTFSS STATUS, Z
00FB   0AFD           00523     GOTO  $+2            ;then skip the next three lines
00FC   0A43           00524         goto  CH_UP          ;goto channel UP routine
                      00525 
00FD   0A9C           00526     GOTO _LOOP           ;and go to the 'SET_OUTPUT' label
                      00527 
                      00528     END                   ;/* END of the Program */
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE 12


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
CAL0                              00000001
CAL1                              00000002
CAL2                              00000003
CAL3                              00000004
CAL4                              00000005
CAL5                              00000006
CAL6                              00000007
CHECK                             00000017
CH_UP                             00000043
DC                                00000001
DECREASE_VOLUME                   00000035
DELAY                             00000095
DELAY_LOOP                        00000097
F                                 00000001
FSR                               00000004
GP0                               00000000
GP1                               00000001
GP2                               00000002
GP3                               00000003
GP4                               00000004
GP5                               00000005
GPIO                              00000006
GPWUF                             00000007
I2C_ACK                           0000008C
I2C_CHECK_ACK                     00000079
I2C_NACK                          00000091
I2C_READ_BIT                      00000083
I2C_READ_BYTE                     00000080
I2C_SHIFT                         00000075
I2C_START                         00000065
I2C_STOP                          00000068
I2C_WRITE_0                       00000074
I2C_WRITE_1                       00000072
I2C_WRITE_BIT                     0000006F
I2C_WRITE_BYTE                    0000006C
INCREASE_VOLUME                   00000031
INDF                              00000000
INIT                              00000002
IRx                               00000003
LOOP                              00000031
MAXRAM                            0000003F
NOT_GPPU                          00000006
NOT_GPWU                          00000007
NOT_PD                            00000003
NOT_TO                            00000004
OSCCAL                            00000005
PA0                               00000005
PCL                               00000002
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE 13


SYMBOL TABLE
  LABEL                             VALUE 

RAM                               00000007
SCL                               00000004
SCL_HIGH                          0000005D
SCL_LOW                           00000061
SDA                               00000005
SDA_HIGH                          00000055
SDA_LOW                           00000059
SEEK_DOWN                         0000004C
SET_VOLUME                        00000038
STATUS                            00000003
T0CS                              00000005
T0SE                              00000004
TMR0                              00000001
TRISIO0                           00000000
TRISIO1                           00000001
TRISIO2                           00000002
TRISIO3                           00000003
TRISIO4                           00000004
TRISIO5                           00000005
W                                 00000000
Z                                 00000002
_CHECK_DATA                       000000E1
_CONFIG                           00000FFF
_CP_OFF                           00000FFF
_CP_ON                            00000FF7
_ExtRC_OSC                        00000FFF
_IDLOC0                           00000400
_IDLOC1                           00000401
_IDLOC2                           00000402
_IDLOC3                           00000403
_IntRC_OSC                        00000FFE
_LOOP                             0000009C
_LP_OSC                           00000FFC
_MCLRE_OFF                        00000FEF
_MCLRE_ON                         00000FFF
_NEXT_BIT                         000000D9
_OSC_ExtRC                        00000FFF
_OSC_IntRC                        00000FFE
_OSC_LP                           00000FFC
_OSC_XT                           00000FFD
_RECEIVE_BIT                      000000BD
_RECEIVE_BYTE                     000000BB
_WDT_OFF                          00000FFB
_WDT_ON                           00000FFF
_XT_OSC                           00000FFD
__12F509                          00000001
_bit_count                        00000012
_byte_count                       00000011
_count                            00000010
_ir_data                          00000013
ack                               0000000C
bit_count                         00000009
freq                              00000397
MPASM  5.51  PIC10F2XX+PIC12F5XX+I2S+RDA5807F   9-8-2025  14:44:37         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

freqB                             00000031
freqH                             0000000C
freqL                             00000040
frequency_h                       0000000F
frequency_l                       0000000E
i                                 00000007
i2c_data                          0000000A
j                                 00000008
port                              0000000B
volume                            0000000D
volume_init                       00000083


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXX--
0400 : XXXX------------ ---------------- ---------------- ----------------
0FC0 : ---------------- ---------------- ---------------- ---------------X

All other memory blocks unused.

Program Memory Words Used:   254
Program Memory Words Free:   770


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     1 reported,     0 suppressed

